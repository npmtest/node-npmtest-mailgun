{"/home/travis/build/npmtest/node-npmtest-mailgun/test.js":"/* istanbul instrument in package npmtest_mailgun */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailgun/lib.npmtest_mailgun.js":"/* istanbul instrument in package npmtest_mailgun */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mailgun = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mailgun = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mailgun/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mailgun && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mailgun */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mailgun\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mailgun.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mailgun.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mailgun.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mailgun.__dirname + '/lib.npmtest_mailgun.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailgun/node_modules/mailgun/mailgun.js":"//\r\n// Copyright (C) 2011 Patrick Stein\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n\r\n// TODO - better error handling on requests\r\n\r\n// Dirt simple includes.  Nice that we can keep things simple :)\r\nvar https = require('https'),\r\n    querystring = require('querystring');\r\n\r\n// Mailgun options constants.  See Mailgun's API docs for details.\r\nvar MAILGUN_TAG = 'X-Mailgun-Tag',\r\n    CAMPAIGN_ID = 'X-Campaign-Id';\r\n\r\n// Utility dumb XML parsing helper.  Builds a regex of the form\r\n// `<input>\\s*(.*?)\\s*</input>`, and memoizes for a slight optimization.\r\nvar xre = function() {\r\n  var cache = {};\r\n\r\n  return function(input) {\r\n    // Try to fetch the memoized version.\r\n    if (cache.hasOwnProperty(input)) return cache[input];\r\n\r\n    // Otherwise build it and return it.\r\n    var re = new RegExp('<' + input + '>\\\\s*(.*?)\\\\s*</' + input + '>', 'im');\r\n    cache[input] = re;\r\n    return re;\r\n  };\r\n}();\r\n\r\n// This class is used to tie functionality to an API key, rather than\r\n// using a global initialization function that forces people to use\r\n// only one API key per application.\r\nvar Mailgun = function(apiKey) {\r\n\r\n  // Authentication uses the api key in base64 form, so we cache that\r\n  // here.\r\n  this._apiKey64 = new Buffer('api:' + apiKey).toString('base64');\r\n\r\n  this._apiKey = apiKey;\r\n};\r\nMailgun.prototype = {};\r\n\r\n// Utility method to set up required http options.\r\nMailgun.prototype._createHttpOptions = function(resource, method, servername) {\r\n  return {\r\n    host: 'api.mailgun.net',\r\n    port: 443,\r\n    method: method,\r\n    path: '/api/' + resource + (servername ? '?servername=' + servername : ''),\r\n\r\n    headers: {\r\n      'Authorization': 'Basic ' + this._apiKey64\r\n    }\r\n  };\r\n}\r\n\r\n//\r\n// Here be the email sending code.\r\n//\r\n\r\nMailgun.prototype.sendText = function(sender, recipients, subject, text) {\r\n\r\n  // These are flexible arguments, so we define them here to make\r\n  // sure they're in scope.\r\n  var servername = '';\r\n  var options = {};\r\n  var callback = null;\r\n\r\n  // Less than 4 arguments means we're missing something that prevents\r\n  // us from even sending an email, so we fail.\r\n  if (arguments.length < 4)\r\n    throw new Error('Missing required argument');\r\n\r\n  // Flexible argument magic\r\n  var args = Array.prototype.slice.call(arguments, 4);\r\n  if (args.length && typeof args[0] == 'string')\r\n    servername = args.shift() || servername;\r\n  if (args.length && typeof args[0] == 'object')\r\n    options = args.shift() || options;\r\n  if (args.length && typeof args[0] == 'function')\r\n    callback = args.shift() || callback;\r\n\r\n  // We allow recipients to be passed as either a string or an array,\r\n  // but normalize to to an array for consistency later in the\r\n  // function.\r\n  if (typeof(recipients) == 'string')\r\n      recipients = [recipients];\r\n\r\n  // Build the HTTP POST body text.\r\n  var body = querystring.stringify({\r\n    sender: sender,\r\n    recipients: recipients.join(', '),\r\n    subject: subject,\r\n    body: text\r\n  });\r\n  if(options && options !== {})\r\n    body.options = JSON.stringify(options);\r\n\r\n  // Prepare our API request.\r\n  var httpOptions = this._createHttpOptions('messages.txt', 'POST', servername);\r\n  httpOptions.headers['Content-Type'] = 'application/x-www-form-urlencoded';\r\n  httpOptions.headers['Content-Length'] = Buffer.byteLength(body);\r\n\r\n  // Fire the request to Mailgun's API.\r\n  var req = https.request(httpOptions, function(res) {\r\n\r\n    // If the user supplied a callback, fire it and set `err` to the\r\n    // status code of the request if it wasn't successful.\r\n    if (callback) callback(res.statusCode != 201 ? new Error(res.statusCode) : undefined);\r\n  });\r\n\r\n  // Wrap up the request by sending the body, which contains the\r\n  // actual email data we want to send.\r\n  req.end(body);\r\n};\r\n\r\nMailgun.prototype.sendRaw = function(sender, recipients, rawBody) {\r\n\r\n  // These are flexible arguments, so we define them here to make\r\n  // sure they're in scope.\r\n  var servername = '';\r\n  var callback = null;\r\n\r\n  // Less than 3 arguments means we're missing something that prevents\r\n  // us from even sending an email, so we fail.\r\n  if (arguments.length < 3)\r\n    throw new Error('Missing required argument');\r\n\r\n  // Flexible argument magic!\r\n  var args = Array.prototype.slice.call(arguments, 3);\r\n  // Pluck servername.\r\n  if (args.length && typeof args[0] == 'string')\r\n    servername = args.shift() || servername;\r\n  // Pluck callback.\r\n  if (args.length && typeof args[0] == 'function')\r\n    callback = args.shift() || callback;\r\n  // Don't be messy.\r\n  delete args;\r\n\r\n  // We allow recipients to be passed as either a string or an array,\r\n  // but normalize to to an array for consistency later in the\r\n  // function.\r\n  if (typeof(recipients) == 'string')\r\n      recipients = [recipients];\r\n\r\n  // Mailgun wants its messages formatted in a special way.  Why?\r\n  // Who knows.\r\n  var message = sender +\r\n                '\\n' + recipients.join(', ') +\r\n                '\\n\\n' + rawBody;\r\n\r\n  // Prepare the APi request.\r\n  var httpOptions = this._createHttpOptions('messages.eml', 'POST', servername);\r\n  httpOptions.headers['Content-Type'] = 'text/plain; charset=utf-8';\r\n  httpOptions.headers['Content-Length'] = Buffer.byteLength(message);\r\n\r\n  // Fire it.\r\n  var req = https.request(httpOptions, function(res) {\r\n\r\n    // If the user supplied a callback, fire it and set `err` to the\r\n    // status code of the request if it wasn't successful.\r\n    if (callback) callback(res.statusCode != 201 ? new Error(res.statusCode) : undefined);\r\n  });\r\n\r\n  // Wrap up the request by sending the message, which contains the\r\n  // actual email data we want to send.\r\n  req.end(message);\r\n\r\n};\r\n\r\n//\r\n// Here follows the routing code\r\n//\r\n\r\nMailgun.prototype.createRoute = function(pattern, destination, callback) {\r\n\r\n  // Prep the request.\r\n  var httpOptions = this._createHttpOptions('routes.xml', 'POST');\r\n\r\n  // Create the HTTP POST data.\r\n  var data = '' +\r\n  '<route>' +\r\n    '<pattern>' + pattern + '</pattern>' +\r\n    '<destination>' + destination + '</destination>' +\r\n  '</route>';\r\n\r\n  // Prep the request.\r\n  var httpOptions = this._createHttpOptions('routes.xml', 'POST');\r\n  httpOptions.headers['Content-Type'] = 'text/xml';\r\n  httpOptions.headers['Content-Length'] = Buffer.byteLength(data);\r\n\r\n  // Fire it.\r\n  https.request(httpOptions, function(res) {\r\n\r\n    // Collect the data\r\n    var data = '';\r\n    res.on('data', function(c) { data += c });\r\n    res.on('close', function(err) { callback(err) });\r\n    res.on('end', function() { finish() });\r\n\r\n    // Handle the results\r\n    var finish = function() {\r\n\r\n      if (res.statusCode == 201) {\r\n        var id = xre('id').exec(data)[1];\r\n\r\n        callback && callback(undefined, id);\r\n      } else {\r\n        var message = xre('message').exec(data);\r\n        callback && callback(new Error(message ? message[1] : data));\r\n      }\r\n    };\r\n  }).end(data);\r\n};\r\n\r\nMailgun.prototype.deleteRoute = function(id, callback) {\r\n\r\n  // Prep the request\r\n  var httpOptions = this._createHttpOptions('routes/' + id + '.xml', 'DELETE');\r\n  httpOptions.headers['Content-Type'] = 'text/xml';\r\n  httpOptions.headers['Content-Length'] = 0;\r\n\r\n  // Fire it.\r\n  https.request(httpOptions, function(res) {\r\n\r\n    if (res.statusCode == 200) {\r\n      callback && callback(undefined);\r\n    } else {\r\n      var data = '';\r\n      res.on('data', function(c) { data += c });\r\n      res.on('close', function(err) { callback(err) });\r\n      res.on('end', function() {\r\n        var message = xre('message').exec(data);\r\n        callback && callback(new Error(message ? message[1] : data))\r\n      });\r\n    }\r\n  }).end();\r\n};\r\n\r\nMailgun.prototype.getRoutes = function(callback) {\r\n\r\n  // Some sanity checking.  It makes no sense to call this without a\r\n  // callback.\r\n  if (typeof callback != 'function') throw new Error('Callback must be a function');\r\n\r\n  // Prep the request.\r\n  var httpOptions = this._createHttpOptions('routes.xml', 'GET');\r\n\r\n  // Fire it.\r\n  https.request(httpOptions, function(res) {\r\n\r\n    // Check for failure\r\n    if (res.statusCode != 200)\r\n      return callback(res.statusCode);\r\n\r\n    // We're going to be a little lazy and just eat up all the data\r\n    // before parsing it.\r\n    var data = '';\r\n    res.on('data', function(c) {\r\n      data += c;\r\n    });\r\n\r\n    // Handle catastrophic failures with an error\r\n    res.on('close', function(err) {\r\n      // FIXME - In some cases this could cause the callback to be called\r\n      //         with an error, even after we called it successfully.\r\n      callback(err.code);\r\n    });\r\n\r\n    // Once the request is done, we have all the data and can parse it.\r\n    res.on('end', function() {\r\n\r\n      // Silly XML parsing because I don't want to include another\r\n      // dependency.  Fortunately the structure is very simple and\r\n      // convenient to parse with this method.\r\n      var routes = data.replace(/\\s/g, '').match(xre('route'));\r\n      var nroutes = [];\r\n      for (var i=0; i<routes.length; i++) {\r\n\r\n        // Pull the route out, since we're going to change it.\r\n        var route = routes[i];\r\n\r\n        // Pull the data.\r\n        var r = {};\r\n        r.pattern = xre('pattern').exec(route)[1];\r\n        r.destination = xre('destination').exec(route)[1];\r\n        r.id = xre('id').exec(route)[1];\r\n        nroutes.push(r);\r\n      }\r\n\r\n      // Send the data to the callback.\r\n      callback(undefined, nroutes);\r\n\r\n    });\r\n  }).end();\r\n};\r\n\r\nexports.Mailgun = Mailgun;\r\nexports.MAILGUN_TAG = MAILGUN_TAG;\r\nexports.CAMPAIGN_ID = CAMPAIGN_ID;\r\n\r\nmodule.exports = exports;\r\n\r\n"}